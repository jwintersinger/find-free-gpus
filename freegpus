#!/usr/bin/env python
import xmltodict
import subprocess
import random
import argparse

def _parse_args():
    parser = argparse.ArgumentParser(
        description = 'Find indices of free GPUs on system',
        formatter_class = argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('-f', '--print-only-first', action='store_true', help='Print only first available index')
    parser.add_argument('-r', '--randomize', action='store_true', help='Randomize order of indices')
    parser.add_argument('-w', '--who', action='store_true', help='Print GPUs used by each user')
    args = parser.parse_args()
    return args

def _enum_gpus():
    stdout = subprocess.check_output(('nvidia-smi', '-q', '-x'))
    X = xmltodict.parse(stdout)

    idxs = []
    for idx, gpu in enumerate(X['nvidia_smi_log']['gpu']):
        yield (idx, gpu)

def find_free_gpus():
    idxs = [idx for idx, gpu in _enum_gpus() if gpu['processes'] is None]
    return idxs

def resolve_gpu_users():
    from collections import defaultdict
    import psutil
    gpu_users = defaultdict(set)

    for idx, gpu in _enum_gpus():
        if gpu['processes'] is None:
            continue
        pi = gpu['processes']['process_info']
        if not isinstance(pi, list):
            pi = [pi]
        pids = [int(P['pid']) for P in pi]
        for pid in pids:
            user = psutil.Process(pid).username()
            gpu_users[user].add(idx)

    return dict(gpu_users)

if __name__ == '__main__':
    args = _parse_args()
    if args.who:
        gpu_users = resolve_gpu_users()
        for user in sorted(gpu_users.keys()):
            print(user, ','.join([str(idx) for idx in sorted(gpu_users[user])]))
    else:
        free_gpus = find_free_gpus()
        if args.randomize:
            random.shuffle(free_gpus)
        if args.print_only_first:
            print(free_gpus[0] if len(free_gpus) > 0 else '')
        else:
            print(' '.join([str(idx) for idx in free_gpus]))
